/*
    This file was generated automatically by Alchitry Labs 2.0.30-BETA.
    Do not edit this file directly. Instead edit the original Lucid source.
    This is a temporary file and any changes made to it will be destroyed.
*/

module datapath (
        input wire clk,
        input wire rst,
        input wire [4:0] io_button_edge,
        input wire slow_clock_edge,
        input wire [31:0] alu_out,
        output reg [5:0] alufn,
        output reg asel,
        output reg bsel,
        output reg [1:0] wdsel,
        output reg [2:0] ra1,
        output reg [2:0] ra2,
        output reg [2:0] wa,
        output reg we,
        output reg reset_cond
    );
    localparam E_States_START = 5'h0;
    localparam E_States_IDLE1 = 5'h1;
    localparam E_States_PAUSE = 5'h2;
    localparam E_States_DECREASE_CLK_NO_PRESS = 5'h3;
    localparam E_States_CHECK_CLK_OVER_NO_PRESS = 5'h4;
    localparam E_States_DEDUCT_SCORE_NO_PRESS = 5'h5;
    localparam E_States_CLAMP_SCORE_TO_ZERO_NO_PRESS = 5'h6;
    localparam E_States_CHECK_CORRECT_INPUT_1 = 5'h7;
    localparam E_States_CHECK_CORRECT_INPUT_2 = 5'h8;
    localparam E_States_CHECK_CORRECT_INPUT_3 = 5'h9;
    localparam E_States_INCREMENT_SCORE = 5'ha;
    localparam E_States_DEDUCT_SCORE = 5'hb;
    localparam E_States_CLAMP_SCORE_TO_ZERO = 5'hc;
    localparam E_States_IDLE2 = 5'hd;
    localparam E_States_DECREASE_CLK = 5'he;
    localparam E_States_CHECK_CLK_OVER = 5'hf;
    localparam E_States_RESET_CLK = 5'h10;
    localparam E_States_UPDATE_POSITION_1 = 5'h11;
    localparam E_States_UPDATE_POSITION_2 = 5'h12;
    localparam E_States_UPDATE_POSITION_3 = 5'h13;
    localparam E_States_CHECK_END = 5'h14;
    localparam E_States_END = 5'h15;
    logic [4:0] D_state_d, D_state_q = 5'h0;
    always @* begin
        D_state_d = D_state_q;
        
        ra1 = 3'h0;
        ra2 = 3'h0;
        wa = 3'h0;
        we = 1'h0;
        alufn = 6'h0;
        asel = 1'h0;
        bsel = 1'h0;
        wdsel = 1'h0;
        reset_cond = 1'h0;
        
        case (D_state_q)
            5'h0: begin
                we = 1'h0;
                if (io_button_edge[1'h0]) begin
                    D_state_d = 5'h1;
                end
            end
            5'h1: begin
                we = 1'h0;
                if (slow_clock_edge) begin
                    D_state_d = 5'h3;
                end
                if (io_button_edge[1'h0]) begin
                    D_state_d = 5'h2;
                end
                if (io_button_edge[2'h3]) begin
                    D_state_d = 5'h7;
                end
                if (io_button_edge[1'h1]) begin
                    D_state_d = 5'h8;
                end
                if (io_button_edge[3'h4]) begin
                    D_state_d = 5'h9;
                end
            end
            5'h2: begin
                we = 1'h0;
                if (io_button_edge[1'h0]) begin
                    D_state_d = 5'h1;
                end
            end
            5'h3: begin
                ra1 = 3'h4;
                ra2 = 1'h0;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h4;
            end
            5'h4: begin
                ra1 = 3'h4;
                ra2 = 3'h7;
                we = 1'h0;
                alufn = 6'h33;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h0) begin
                    D_state_d = 5'h1;
                end else begin
                    if (alu_out[1'h0] == 1'h1) begin
                        D_state_d = 5'h5;
                    end
                end
            end
            5'h5: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h6;
            end
            5'h6: begin
                ra1 = 2'h3;
                ra2 = 3'h7;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h2;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                D_state_d = 5'h10;
            end
            5'h7: begin
                ra1 = 1'h0;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out[1'h0] == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'h8: begin
                ra1 = 1'h1;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out[1'h0] == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'h9: begin
                ra1 = 2'h2;
                we = 1'h0;
                alufn = 6'h11;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h1) begin
                    D_state_d = 5'ha;
                end else begin
                    if (alu_out[1'h0] == 1'h0) begin
                        D_state_d = 5'hb;
                    end
                end
            end
            5'hb: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hc;
            end
            5'hc: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h2;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                D_state_d = 5'hd;
            end
            5'ha: begin
                ra1 = 2'h3;
                wa = 2'h3;
                we = 1'h1;
                alufn = 6'h0;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hd;
            end
            5'hd: begin
                we = 1'h0;
                if (slow_clock_edge) begin
                    D_state_d = 5'he;
                end
            end
            5'he: begin
                ra1 = 3'h4;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h1;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'hf;
            end
            5'hf: begin
                ra1 = 3'h4;
                ra2 = 3'h7;
                we = 1'h0;
                alufn = 6'h33;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                if (alu_out[1'h0] == 1'h0) begin
                    D_state_d = 5'hd;
                end else begin
                    if (alu_out[1'h0] == 1'h1) begin
                        D_state_d = 5'h10;
                    end
                end
            end
            5'h10: begin
                ra1 = 3'h5;
                ra2 = 3'h7;
                wa = 3'h4;
                we = 1'h1;
                alufn = 6'h0;
                asel = 1'h0;
                bsel = 1'h0;
                D_state_d = 5'h11;
            end
            5'h11: begin
                ra1 = 1'h0;
                wa = 1'h0;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h12;
            end
            5'h12: begin
                ra1 = 1'h1;
                wa = 1'h1;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h13;
            end
            5'h13: begin
                ra1 = 2'h2;
                wa = 2'h2;
                we = 1'h1;
                alufn = 6'h21;
                asel = 1'h0;
                bsel = 1'h1;
                wdsel = 2'h0;
                D_state_d = 5'h14;
            end
            5'h14: begin
                ra1 = 1'h0;
                ra2 = 3'h7;
                we = 1'h0;
                asel = 1'h0;
                bsel = 1'h0;
                wdsel = 2'h0;
                alufn = 6'h33;
                if (alu_out[1'h0] == 1'h0) begin
                    D_state_d = 5'h1;
                end else begin
                    if (alu_out[1'h0] == 1'h1) begin
                        D_state_d = 5'h15;
                    end
                end
            end
            5'h15: begin
                reset_cond = io_button_edge[1'h0];
            end
        endcase
    end
    
    
    always @(posedge (clk)) begin
        if ((rst) == 1'b1) begin
            D_state_q <= 5'h0;
        end else begin
            D_state_q <= D_state_d;
        end
    end
endmodule